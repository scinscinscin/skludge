import axios from "axios";
import React, { useEffect, useState } from "react";
import { FieldValue, useForm } from "react-hook-form";
import { User, UseStateReturn } from "../App";

interface Division {
	uuid: string;
	name: string;
	members: User[];
}

// A page for viewing all divisions and committees of the organization
function Manage() {
	const [divisions, setDivisions] = useState<Division[]>([]);
	useEffect(() => {
		axios
			.get("/division/get")
			.then(({ data }) => {
				setDivisions(data);
			})
			.catch();
	}, []);

	return (
		<div className="manage_page">
			<Divisions state={[divisions, setDivisions]} />
			<Users state={[divisions, setDivisions]} />
		</div>
	);
}

interface Props {
	state: UseStateReturn<Division[]>;
}

function Divisions({ state: [divisions, setDivisions] }: Props) {
	const [isCreating, setIsCreating] = useState(false);
	const CreateForm = useForm();
	const toggle = () => setIsCreating(!isCreating);

	function submit(formData: FieldValue<{ name: string }>) {
		axios.post("/division/create", formData).then(({ data }) => {
			setDivisions([...divisions, data]);
			toggle();
			CreateForm.reset();
		});
	}

	function Main() {
		if (divisions.length === 0) return <h2>No divisions found</h2>;
		return (
			<div className="list">
				{divisions.map((division, idx) => (
					<div className="list-item" key={idx}>
						<h3>{division.name}</h3>
						{division.members.length > 0 ? (
							<p>Members: {division.members.map((u) => u.username).join(", ")}</p>
						) : (
							<p>No members</p>
						)}
					</div>
				))}
			</div>
		);
	}

	function Form() {
		return (
			<form onSubmit={CreateForm.handleSubmit(submit)}>
				<label>Name</label>
				<input {...CreateForm.register("name", { required: true })}></input>
				<button type="submit">Create new division</button>
			</form>
		);
	}

	return (
		<section aria-label="Divisions section">
			<header className="space_between">
				<h1>Divisions</h1>
				<button onClick={toggle}>{isCreating ? "Cancel" : "Create New Division"}</button>
			</header>

			<main>{isCreating ? <Form /> : <Main />}</main>
		</section>
	);
}

function Users({ state: [divisions, setDivisions] }: Props) {
	const [users, setUsers] = React.useState<User[]>([]);
	const [isCreating, setIsCreating] = React.useState(false);
	const [newUser, setNewUser] = React.useState<{ user: User; password: string } | null>(null);

	const toggle = () => setIsCreating(!isCreating);
	const userCreateForm = useForm();

	function createUser(formData: FieldValue<{ username: string }>) {
		axios
			.post("/user/create", formData)
			.then(({ data: { division, user, password } }) => {
				setUsers([...users, user]);
				setNewUser({ user, password });
				setDivisions(divisions.map((d) => (d.uuid !== division.uuid ? d : division)));
				toggle();
				userCreateForm.reset();
			})
			.catch();
	}

	useEffect(() => {
		axios
			.get("/user/get")
			.then(({ data }) => {
				setUsers(data);
			})
			.catch();
	}, []);

	function Form() {
		return (
			<form onSubmit={userCreateForm.handleSubmit(createUser)}>
				<label>Username</label>
				<input {...userCreateForm.register("username", { required: true })} />

				<label>Division</label>
				<select {...userCreateForm.register("divisionUUID", { required: true })}>
					{divisions.map((div, idx) => (
						<option value={div.uuid} key={idx}>
							{div.name}
						</option>
					))}
				</select>
				<button type="submit">Create new user</button>
			</form>
		);
	}

	function Main() {
		if (users.length === 0) return <h1>No users found</h1>;

		return (
			<div className="list">
				{users.map((user, idx) => (
					<div className="list-item" key={idx}>
						<h3>{user.username}</h3>
					</div>
				))}
			</div>
		);
	}

	return (
		<section aria-label="Users section" className="mt_30">
			<header className="space_between">
				<h1>Users</h1>
				<button onClick={toggle}>{isCreating ? "Cancel" : "Create new User"}</button>
			</header>

			<main>
				{newUser !== null && (
					<h3>
						New user created with name "{newUser.user.username}" and autogenerated password "{newUser.password}"
					</h3>
				)}
				{isCreating ? <Form /> : <Main />}
			</main>
		</section>
	);
}
export default Manage;
